<script type="text/processing" data-processing-target="edit_mini_map_constructions_canvas">
int RECT_SIZE = 40;
int MAP_WIDTH = <%= @mini_map.size %> * RECT_SIZE;
int MAP_HEIGHT = <%= @mini_map.size %> * RECT_SIZE;
int CANVAS_WIDTH = 11 * RECT_SIZE;
int CANVAS_HEIGHT = MAP_HEIGHT + 2.3 * RECT_SIZE;
int WORKBENCH_TITLE_HEIGHT = MAP_HEIGHT + RECT_SIZE;
int WORKBENCH_MAPCHIP_HEIGHT = MAP_HEIGHT + RECT_SIZE * 1.2;
int WORKBENCH_X_OFFSET = 10;
Iterator<String, PImage> mapChipIt;
int xOffset = 1;
int yOffset = 1;
int selectedX = null;
int selectedY = null;
int selectedTerrainID = null;
int selectedConstructionID = null;
int mapChipLastX = null;
int selectedMapChipIndex = null;

ArrayList mapCells = new ArrayList();
HashMap<String, PImage> terrainHashMap = new HashMap<String, PImage>();
HashMap<String, PImage> terrainWhiteHashMap = new HashMap<String, PImage>();
HashMap<String, PImage> constructHashMap = new HashMap<String, PImage>();
HashMap constructionTerrainHashMap<String, String> = new HashMap<String, String>();
ArrayList mapChipIDs;

PImage blankImg = loadImage("/assets/map_white.png");
PImage underConstructionImg = loadImage("/assets/map_orange.png");

<% Terrain.all.each do |terrain| %>
PImage <%= terrain.img_file %> = loadImage("/assets/<%= terrain.img_file %>.png");
PImage <%= terrain.img_file_white %> = loadImage("/assets/<%= terrain.img_file_white %>.png");
terrainHashMap.put("<%= terrain.id %>", <%= terrain.img_file %>);
terrainWhiteHashMap.put("<%= terrain.id %>", <%= terrain.img_file_white %>);
  <% terrain.constructions.each do |construction| %>
  constructionTerrainHashMap.put("<%= construction.id %>", "<%= terrain.id %>");
  <% end %>
<% end %>

<% Construction.all.each do |construct| %>
PImage <%= construct.img_file %> = loadImage("/assets/<%= construct.img_file %>.png");
constructHashMap.put("<%= construct.id %>", <%= construct.img_file %>);
<% end %>
PImage const_capital = loadImage("/assets/const_capital.png");

void setup() {
  frameRate(3);
  size(CANVAS_WIDTH + xOffset * 2, CANVAS_HEIGHT + yOffset * 2);
}

void draw() {
  background(255);
  fill(0);

  // Draw map
  for (int n = 0; n < mapCells.size(); n++) {
    (MapCell)mapCells.get(n).draw();
  }

  // Draw map section line
  stroke(128);
  strokeWeight(1);
  for (int x = 0; x <= MAP_WIDTH; x = x + RECT_SIZE) {
    for (int y = 0; y <= MAP_HEIGHT; y = y + RECT_SIZE) {
      line(x, 0, x, MAP_HEIGHT);
      line(0, y, MAP_WIDTH, y);
    }
  }

  // Draw map selection
  if (selectedX != null && selectedY != null) {
    noFill();
    stroke(255, 99, 71); // tomato
    strokeWeight(2);
    rect(selectedX, selectedY, RECT_SIZE, RECT_SIZE);
  }

  // Draw workbench
  textSize(12);
  int workbench_x_cursor = 10;
  mapChipIDs = new ArrayList();
  text("<%=t 'activerecord.attributes.mini_map_cell.construction' %>:", WORKBENCH_X_OFFSET, MAP_HEIGHT + RECT_SIZE);
  mapChipIt = constructHashMap.entrySet().iterator();
  while (mapChipIt.hasNext()) {
    Map.Entry me = (Map.Entry)mapChipIt.next();
    if (selectedTerrainID != null && selectedTerrainID.equals(constructionTerrainHashMap.get(me.getKey()))) {
      image(me.getValue(), workbench_x_cursor, WORKBENCH_MAPCHIP_HEIGHT, RECT_SIZE, RECT_SIZE);
      mapChipIDs.add(me.getKey());
      workbench_x_cursor = workbench_x_cursor + RECT_SIZE + WORKBENCH_X_OFFSET;
    }
  }
  mapChipLastX = workbench_x_cursor;

  // Draw map chip selection
  if (selectedMapChipIndex != null) {
    noFill();
    stroke(255, 99, 71); // tomato
    strokeWeight(2);
    rect(selectedMapChipIndex * (RECT_SIZE + WORKBENCH_X_OFFSET) + WORKBENCH_X_OFFSET, WORKBENCH_MAPCHIP_HEIGHT, RECT_SIZE, RECT_SIZE);
  }
}

void clearMapCells() {
  mapCells = new ArrayList();
  selectedMapChipIndex = null;
  $('#update_map_cell_mapchip_id').val('');
}

void setMapCell(int x, int y, String terrain, String resource, String construction, boolean capitalFlg) {
  mapCells.add(new MapCell(x, y, terrain, resource, construction, capitalFlg));
}

class MapCell {
  int gridX;
  int gridY;
  int mapX;
  int mapY;
  String terrain;
  String construction;
  boolean underConstructionFlg;
  boolean capitalFlg; 

  MapCell(int x, int y, String t, String c, boolean uc, boolean ca) {
    gridX = x;
    gridY = y;
    mapX = x * RECT_SIZE + xOffset;
    mapY = y * RECT_SIZE + yOffset;
    terrain = t;
    construction = c;
    underConstructionFlg = uc;
    capitalFlg = ca;
  }

  void draw() {
    image(terrainWhiteHashMap.get(terrain), mapX, mapY, RECT_SIZE, RECT_SIZE);
    if (!construction.equals('')) {
      if (underConstructionFlg == false) {
        image(underConstructionImg, mapX, mapY, RECT_SIZE, RECT_SIZE);
      }
      image(constructHashMap.get(construction), mapX, mapY, RECT_SIZE, RECT_SIZE);
    }
  }

  boolean isPointed(int x, int y) {
    if (gridX == x && gridY == y) {
      return true;
    } else {
      return false;
    }
  }
}

void mousePressed() {
  if (mouseX < MAP_WIDTH && mouseY < MAP_HEIGHT) {
    int mapX = int(mouseX / RECT_SIZE);
    int mapY = int(mouseY / RECT_SIZE);
    selectedX = mapX * RECT_SIZE;
    selectedY = mapY * RECT_SIZE;
    $('#update_map_cell_x').val(mapX);
    $('#update_map_cell_y').val(mapY);
    selectedConstructionID = null;
    selectedMapChipIndex = null;
    for (int i = 0; i < mapCells.size(); i++) {
      mapCell = (MapCell)mapCells.get(i);
      if (mapCell.isPointed(mapX, mapY) == true) {
        selectedTerrainID = mapCell.terrain;
        selectedConstructionID = mapCell.construction;
        break;
      }
    }
    if (selectedConstructionID == 0) {
      $('#new_construction').attr('disabled', false);
      $('#delete_construction').attr('disabled', true);
    } else {
      $('#new_construction').attr('disabled', true);
      $('#delete_construction').attr('disabled', false);
    }

  } else if (WORKBENCH_X_OFFSET <= mouseX && WORKBENCH_MAPCHIP_HEIGHT <= mouseY && mouseY <= WORKBENCH_MAPCHIP_HEIGHT + RECT_SIZE) {
    for (int x = WORKBENCH_X_OFFSET; x < mapChipLastX; x = x + RECT_SIZE + WORKBENCH_X_OFFSET) {
      if (x <= mouseX && mouseX <= x + RECT_SIZE) {
        selectedMapChipIndex = int(mouseX / (RECT_SIZE + WORKBENCH_X_OFFSET));
        $('#update_map_cell_mapchip_id').val(mapChipIDs.get(selectedMapChipIndex));
      }
    }
  }
}

int getSelectedX() {
  return selectedX;
}

int getSelectedY() {
  return selectedY;
}

int getSelectedMapChipIndex() {
  return selectedMapChipIndex;
}
</script>

<%= render 'my_page_menu' %>
<div id="contents">
  <h3>建築マップ</h3>
  マップ名：<%= @mini_map.name %><br />
  <br />
  <canvas id="edit_mini_map_constructions_canvas"></canvas>
  <div class='indent1'>
    <%= form_tag "update_map_cell", :id => "update_map_cell", :method => "post" do %>
    <input id="new_construction" type="button" value="新規建設" />
    <input id="delete_construction" type="button" value="取り壊し" /><br /><br />
    <%= hidden_field :update_map_cell, :x %>
    <%= hidden_field :update_map_cell, :y %>
    <%= hidden_field :update_map_cell, :mapchip_id %>
    <% end %>
  </div>
</div>